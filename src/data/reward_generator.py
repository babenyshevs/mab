import random
from typing import Any, Dict, List, Tuple

import numpy as np


class RewardGenerator:
    """
    Class to generate rewards for a multi-armed bandit problem.
    """

    def __init__(self, config: Dict[str, Dict[str, Any]], seed: int = 42) -> None:
        """
        Initialize the RewardGenerator.

        Args:
            config: A dictionary containing configurations for each arm.
                Each key is the arm identifier, and the value is a dictionary
                containing 'distribution' and 'params' for that arm.
            seed: An integer seed for the random number generator for reproducibility.
        """
        self.arm_configs: Dict[str, Dict[str, Any]] = config
        self.seed: int = seed
        random.seed(self.seed)
        np.random.seed(self.seed)  # To ensure np.round also follows the same seed
        self.distributions: Dict[str, Any] = {
            "gauss": random.gauss,
            "uniform": random.uniform,
            # Add more distribution functions here as needed
        }

    def pull_arm(self, arm_id: str) -> float:
        """
        Pull an arm of the bandit and return the reward.

        Args:
            arm_id: The identifier of the arm to pull.

        Returns:
            float: The reward generated by pulling the arm.

        Raises:
            ValueError: If the arm ID is not found in the configuration.
            ValueError: If the specified distribution is not supported.
        """
        if arm_id not in self.arm_configs:
            raise ValueError(f"Arm '{arm_id}' not found in configuration")

        arm_config: Dict[str, Any] = self.arm_configs[arm_id]
        distribution_name: str = arm_config["distribution"]
        if distribution_name not in self.distributions:
            raise ValueError(f"Unsupported distribution: '{distribution_name}'")

        distribution_function: Any = self.distributions[distribution_name]
        params: List[Any] = arm_config.get("params", [])
        reward: float = np.round(distribution_function(*params), 4)

        return reward

    def pull_arm_n_times(self, arm_id: str, n_times: int) -> List[float]:
        """
        Pull a given arm multiple times and return the rewards obtained.

        Args:
            arm_id: The identifier of the arm to pull multiple times.
            n_times: The number of times to pull the arm.

        Returns:
            List[float]: A list of rewards obtained from pulling the arm.

        Raises:
            ValueError: If the arm ID is not found in the configuration.
        """
        if arm_id not in self.arm_configs:
            raise ValueError(f"Arm '{arm_id}' not found in configuration")

        rewards: List[float] = []
        for _ in range(n_times):
            reward: float = self.pull_arm(arm_id)
            rewards.append(reward)

        return rewards

    def generate_trials(self, num_trials: int) -> Tuple[List[int], List[str], List[float]]:
        """
        Generate trials during the exploration phase.

        Args:
            num_trials: The number of trials to generate.

        Returns:
            Tuple[List[int], List[str], List[float]]: Three lists, one containing the trial numbers,
            one containing the arms pulled, and the other containing the corresponding rewards.
        """
        rounds: List[int] = []
        arms_pulled: List[str] = []
        rewards: List[float] = []

        for trial in range(num_trials):
            arm_id = random.choice(list(self.arm_configs.keys()))
            reward = self.pull_arm(arm_id)
            rounds.append(trial)
            arms_pulled.append(arm_id)
            rewards.append(reward)

        return rounds, arms_pulled, rewards
